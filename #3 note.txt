#3.0 Understanding State

* 리액트의 장점: UI에서 바뀐 부분만 업데이트 해줌

* 변수를 JSX에 전달하는 방법
- let counter = 0;  //변수 생성
- function countUp() { ~~~ } 함수 생성
- Total clicks: {counter} 로 설정해 카운터 값에 따라 변화됨

* onClick={countUp}
 이벤트리스너가 countUp 함수 호출

* ReactDOM.render()로 다시 렌더링을 안해주면 아무리 클릭해도 0으로 보인다. 리렌더링 필요하다.
container를 리렌더링을 해줘야 카운터가 +1 상태로 업데이트 됨.
-> countUp 함수 내에 ReactDOM.render( ) 넣어주기, 렌더링 함수를 render()로 정의해두면 더 편하다.

* React JS의 강점: UI에서 바뀐 부분만 업데이트해준다. 이전에 렌더링된 컴포넌트는 어떤거인지 확인할 수 있다.
Banilla JS의 경우 body와 span이 모두 업데이트된다.

#3.1, 3.2 setState
이전 강의에서는 직접 리렌더링을 시켜줬다. 이번 강의에는 자동으로 리렌더링을 하는 방법을 배운다.

* 리액트JS에서 데이터를 저장시켜 자동으로 리렌더링을 일으킬 수 있는 방법
- React.useState()는 [undefined, f ] -> undefined와 함수가 적힌 배열이 저장된다.
- 이 때 undefined는 data이고 f는 data를 바꿀 때 사용하는 함수이다.
React.useState() 함수는 초기값을 설정할 수 있음. undefined는 초기값, f는 값을 바꾸는 함수

* 배열 원소 저장
const x = [1, 2, 3]
const [a, b, c] = x; 을 통해 a에는 1, b에는 2, c에는 3 저장

* React.useState() 배열에서 데이터에는 원하는 이름을 입력하고(예- counter)
f는 보통 set 뒤에 데이터의 이름을 붙여서 정한다. (예- setCounter)
이 때, setCounter 함수(React.useState()에서 f 함수)는 괄호 속 값으로 업데이트하고 리렌더링을 자동으로 한다.
그러므로 f를 이용하면 리렌더링을 직접 할 필요가 없어진다.
- 업데이트 하고싶은 값은 setCounter(counter + 1)에 써준 counter + 1이다.

#3.3 Recap



#3.4 State Functions



#3.5 Inputs and State



#3.6 State Practice part One



#3.7 State Practice part Two



#3.8 Recap



#3.9 Final Practice and Recap